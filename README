Questions & To do
-----------------
* Why sqrt_sup(block_num * 4) ? for identify dim of **output !!! So can I use other method of this identification ???
* change 1 => 
	int	recursion(t_point **minos, char **output, int i, int j) -> recursion -> ft_solution
* revision de partie position -> how identidy t_point **minos ?
* remove libft if is possible
* change 2 => in all solve part fonctions params
	(*minos, output, i, j) -> (char **output, t_point **minos, i, j)
* What's the difference between **minos & *minos in solve ft_ params
* change 3 => je ss pas wach nkhdem b a o b ola i o j, car kan9lab dok i o j o x o y !!! wa333 
	int a, int b -> int i, int j
* reviser la 2eme partie de la ft_ if_safe +++



Planning
--------
* Check_file (File Validation)	=> 15/05/2019 to 16/05/2019 => OK
* Position (data structure)	=> 17/05/2019 to 19/05/2019 => OK
* Output (**output manager)	=> 20/05/2019 to 21/05/2019 => OK
	char	**create_output(int dim) 		-> OK
	void	print_output(char **output) 		-> OK
	void	free_output(char **output, int dim) 	-> OK
	int	ft_dim(int dim) 			-> OK but question

* Solve				=> 21/05/2019 to ??/05/2019 => NOK
	int	is_safe(char **output, t_point *minos, int a, int b) 		-> NOK -
	void	place_minos(char **output, t_point *minos, int i, int j)	-> NOK -
	void	remove_minos(char **output, t_point *minos)			-> NOK
	int	recursion(t_point **minos, char **output, int i, int j)		-> NOK -
	void	fillit_solve(t_point **minos, char **output, int dim)		-> NOK -

Fonctions
---------
void			error(char *av, int *rcount);
{
	int				ft_max_min(int fd, int *rcount);
	{
		check nbr of blocks => (count < 1 || count > 26)
		int				ft_check(int fd, int *count_b); -> NULL
		{
			check validity chars of block => ('.','#','\n')
		}
	}
	int				ft_read(int fd);
	{
		int				ft_validate_tetris(char **tet, int *pound); -> NULL
		{
			check validity of titros => count relations => (pound > 4) && (count != 6 && count != 8) -> return (0)
		}
		char			**ft_read_tetriminos(char *buff); -> NULL
		{
			read titros -> char **block
		}
	}
}

t_point			**ft_coord(int fd, int *rcount);
{
	char			**ft_read_block(int fd);
	{
		NULL
	}
	void			minos_coord(char **block, t_point **coord, int *count);
	{
		NULL
	}
}

int				sqrt_sup(int n);
{
	NULL
}

void			fillit_solve(t_point **coord, char **grid, int dim);
{
	int				recursion(t_point **coord, char **grid, int i, int j);
	{
		int				is_safe(char **grid, t_point *tetrisa, int a, int b); -> NULL
		void			place_minos(char **grid, t_point *tetrisa, int i, int j); -> NULL
		void			remove_minos(char **grid, t_point *tetrisa); -> NULL
	}
	void			free_grid(char **grid, int dim); -> NULL
	char			**create_grid(int dim); -> NULL
	void			print_grid(char	**grid); -> NULL
}

